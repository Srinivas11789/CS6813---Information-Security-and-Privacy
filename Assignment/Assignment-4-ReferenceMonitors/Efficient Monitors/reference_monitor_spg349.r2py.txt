##################################################################################################################################
#
#              Part 3 ------->  Reference Monitor - Secure Layer (Fixed Part)
#
#                            ---- Run as a part of the Seattle Project -----
#
#  Created By Srinivas Piskala Ganesh Babu
#
#  References : 
#    * https://seattle.poly.edu/wiki/PythonVsRepy
#    * https://seattle.poly.edu/wiki/EducationalAssignments/ProtectFilePartOne
# 
#  Mandatory Conditions Handled:
#    1. Filename starting with "private_" 
#       1.1 "INV" in content - Not visible in listfiles()
#       1.2 "PER" in content - Not able to delete the file
# 
# ---->  Fixed Cases: <------------<----------<---------
#    1.Created a Spearate Function "Check" to perform the read check of every file once it is written
#    2.Check Func verifies the data at offset "0" to be INV or PER after the write is done to handle "INVISIBLE" or "PERMANENT"\ 
#                                     and "I""N""V" written at separate offsets
#    3.Multiple Additions to the db - Dictionary to track INV and PER files removed and a single point of addition
#      made
#    4.Removing the File - Remove the same file entry from the DB list
#    5.Added Locks in Read Call too (Previously only for Write) - To handle Parallen reads and simultaneous Read/Write Operations
###################################################################################################################################

#Global Dictionary to Store the Filenames with INV and PER in Content
db = {"INV":[],"PER":[]}

# Secure File Class Handles File Handlers, Read, Write and Close Calls
class SecureFile():
# Default Constructor Module - Sets the FileHandle, Filename and FileLength with Read call  at offset 0
   def __init__(self, file, filename):
       self.file = file
       self.filename = filename
       self.filelength = len(self.file.readat(None,0))
       self.data0 = self.file.readat(3,0)

###### Fix - 1
# FIX - Removed multiple additions of INV and PER Add

###### FIX - 2
# FIX - Function to Check the Data Beginning in the Files - Data at offset 0 Verification Function
# Check Function Call
   def check(self):
       # Read at Offset 0 with a length of 3
       final_data = self.file.readat(3,0)
       # Filename Check - "private_"
       if self.filename.startswith("private_"):
       # First three letters to be INV
         if final_data == "INV":
             if self.filename not in db['INV']:
                db['INV'].append(self.filename)
             if self.filename in db['PER']:
                try:
                 db['PER'].remove(self.filename)
                except ValueError:
                 pass
       # First Three letters to be PER
         elif final_data == "PER":
             if self.filename not in db['PER']:
                db['PER'].append(self.filename)
                if self.filename in db['INV']:
                  try:
                    db['INV'].remove(self.filename)
                  except ValueError:
                    pass
       # Anything Else Other Than INV or PER
         else:
             if self.filename in db['PER']:
                 db['PER'].remove(self.filename)
             if self.filename in db['INV']:
                db['INV'].remove(self.filename)
       return

# ReadAt Function - Offset and Length Validation then Read & Return ReadData
####### FIX
# FIX -  Read - Locks Added to compensate for parallel and thread reading 
   def readat(self, length, offset):
# Offset Validation
       if offset < 0:
         raise RepyArgumentError
       elif offset > self.filelength:
          raise RepyArgumentError
# Read Data Block Length Validation
       if self.filelength < offset+length:
          raise RepyArgumentError
# FIX - Lock added for Read
       self.lock = createlock()
       self.lock.acquire(True)
# Try Reading the File else raise Exception - To Make Sure if any corner condition hit doesnt break the secure layer
       try:
          read_data = self.file.readat(length,offset)
          self.lock.release()
          return read_data
       except:
          raise RepyArgumentError

# WriteAt Function - LOCK, Offset and Length Validation then Write the Data
# For Write Call, LOCK is Mandatory because multiple write to a file wont suffice proper functionality
   def writeat(self,data,offset):
# Creating the LOCK
       self.lock = createlock() 
# Set the Lock to Blocking
       self.lock.acquire(True)
# Offset Validation for Write Call
       if offset < 0:
           raise RepyArgumentError
       elif offset > self.filelength:
           raise RepyArgumentError
# Try Writing a file else Exception - to protect from any corner cases occuring during Write Call
       try:
          self.file.writeat(data, offset)
# Lock Release
          self.lock.release()
       except:
          raise RepyArgumentError
# Logic To update the Length of the File once the write has been made
# Setting the Filename to a temp and Opening the File Again to get the length of file
       old_file = self.filename
       self.file.close()
# Updating the Variable once the file is reopened
       new_handle = openfile(old_file,True)
       self.file = new_handle
       self.filename = old_file
       self.filelength = len(self.file.readat(None,0))
###### FIX 1 Call
# FIX 1 - Function Call
       self.check()
       return

# Close Function Call
   def close(self):
       return self.file.close()

# Secure OPEN File Function
def secure_openfile(filename, create):
# File Name condition for Preventing Uppercase or Special Characters Present
# Stripping the Filename and the extension
    name = filename.split('.')[0]
    for char in name:
# Uppercase validation and prevention in filename
     if char.isupper():
       raise RepyArgumentError("Error! Invalid Filename - Uppercase not Allowed\n")
     else:
       pass
# Special Characters validation and prevention in filename
     if not char.isalnum():
         if char == "_":
              pass
         else:
              raise RepyArgumentError("Error! Invalid Filename - Non Alpha Numeric not Allowed\n")
     else:
        pass
# File Open Handle
    try:
        handle = openfile(filename,create)
        return SecureFile(handle,filename)
    except:
        raise RepyArgumentError("Error! Unable to Open the File\n")

# Listfile Function
def secure_listfiles():
# Iterated through the INV Buffers to remove any files from visibility
   files =  listfiles()
   noinv = []
   for file in files:
       if file not in db['INV']:
             noinv.append(file)
   return noinv

# Remove File Function
def secure_removefile(filename):
# PER Buffers reference to prevent the File that doesnt have proper Delete permission
  try:
   if filename in db['PER']:
      raise RepyArgumentError("Cannot Delete this File!\n")
   else:
####### FIX - 3
# FIX - Remove filename from INV List once deleted
      if filename in db['INV']:
         db['INV'].remove(filename)
      return removefile(filename)
  except:
      raise RepyArgumentError("Unable to Remove this file!\n")


# The code here sets up type checking and variable hiding for you. You should not need to change anything below here.
sec_file_def = {
  "obj-type":SecureFile,
  "name":"SecureFile",
  "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
  "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(None),"target":SecureFile.writeat},
  "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
  }

CHILD_CONTEXT_DEF["openfile"] = {"type":"objc",
                                 "args":(str,bool),
                                 "exceptions":Exception,
                                 "return":sec_file_def,
                                 "target":secure_openfile
                                }

CHILD_CONTEXT_DEF["listfiles"] = {"type":"func",
                                  "args":None,
                                  "return":list,
                                  "exceptions":"any",
                                  "target":secure_listfiles
                                 }

CHILD_CONTEXT_DEF["removefile"] = {"type":"func",
                                   "args":(str,),
                                   "return":None,
                                   "exceptions":"any",
                                   "target":secure_removefile
                                  }

# Execute the user code
secure_dispatch_module()

